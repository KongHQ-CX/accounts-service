type: spec.insomnia.rest/5.0
name: accounts-service
meta:
  id: wrk_c67e137d803147e4aa8657134cee4058
  created: 1745437611555
  modified: 1745437611555
collection:
  - name: accounts
    meta:
      id: fld_31546975cdcc4872bc1ba45429ad03e3
      created: 1745492361884
      modified: 1745581268681
      sortKey: -1745492361884
      description: Operations related to account management (retrieval and balance updates)
    children:
      - url: "{{ _.base_url }}/accounts"
        name: List all accounts
        meta:
          id: req_7245dd6044714a20bec34e08672a78a0
          created: 1745492361891
          modified: 1745492361891
          isPrivate: false
          description: Returns a list of all accounts with basic details.
          sortKey: -1745492361891
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts"
        name: Create a new account
        meta:
          id: req_ba0a763a6a6248fc9b8f7e3f4f62ab4b
          created: 1745492361892
          modified: 1745511114914
          isPrivate: false
          description: Creates a new account with an initial balance. The account ID is
            automatically generated.
          sortKey: -1745492361996
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "type": "savings",
              "initial_balance": 5000
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        scripts:
          afterResponse: |-
            let data = insomnia.response.json();
            insomnia.environment.set("accountId", data.account_id)
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts/{{ _.accountId }}"
        name: Retrieve a single account
        meta:
          id: req_b5164ddb34404075821879193ab5dd3d
          created: 1745492361893
          modified: 1745506540197
          isPrivate: false
          description: Returns details for the specified account including current balance.
          sortKey: -1745492361893
        method: GET
        scripts:
          preRequest: >-
            /**
             * Pre-request Script: Create Bank Account with Preloaded Balance
             */

            if (!insomnia.environment.get("accountId")) {
              const host = insomnia.environment.get("host");
              const scheme = insomnia.environment.get("scheme");
              const baseUrl = `${scheme}://${host}`;

              const createAccountRequest = {
                url: `${baseUrl}/accounts`,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: {
                  mode: 'raw',
                  raw: JSON.stringify({
                    type: 'savings',
                    initial_balance: 5000.00,
                  }),
                },
              };

              const response = await new Promise((resolve, reject) => {
                insomnia.sendRequest(createAccountRequest, (err, resp) => {
                  if (err != null) reject(err);
                  else resolve(resp);
                });
              });

              if (response.code !== 201) {
                throw new Error(`Account creation failed. Status code: ${response.code}`);
              }

              const responseBody = JSON.parse(response.body.toString());


              insomnia.environment.set('accountId', responseBody.account_id);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts/{{ _.accountId }}/debit"
        name: Debit an account
        meta:
          id: req_7025ef0af1b5487990d7e02691cb64ca
          created: 1745492361894
          modified: 1745506557526
          isPrivate: false
          description: Decreases the account's balance by the specified amount.
          sortKey: -1745492361894
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "amount": 100
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        scripts:
          preRequest: >-
            /**
             * Pre-request Script: Create Bank Account with Preloaded Balance
             */

            if (!insomnia.environment.get("accountId")) {
              const host = insomnia.environment.get("host");
              const scheme = insomnia.environment.get("scheme");
              const baseUrl = `${scheme}://${host}`;

              const createAccountRequest = {
                url: `${baseUrl}/accounts`,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: {
                  mode: 'raw',
                  raw: JSON.stringify({
                    type: 'savings',
                    initial_balance: 5000.00,
                  }),
                },
              };

              const response = await new Promise((resolve, reject) => {
                insomnia.sendRequest(createAccountRequest, (err, resp) => {
                  if (err != null) reject(err);
                  else resolve(resp);
                });
              });

              if (response.code !== 201) {
                throw new Error(`Account creation failed. Status code: ${response.code}`);
              }

              const responseBody = JSON.parse(response.body.toString());


              insomnia.environment.set('accountId', responseBody.account_id);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/accounts/{{ _.accountId }}/credit"
        name: Credit an account
        meta:
          id: req_14397dc6deb74f15bb55b759424772b3
          created: 1745492361896
          modified: 1745506573261
          isPrivate: false
          description: Increases the account's balance by the specified amount.
          sortKey: -1745492361896
        method: POST
        body:
          mimeType: application/json
          text: |-
            {
              "amount": 100
            }
        headers:
          - name: Content-Type
            disabled: false
            value: application/json
        scripts:
          preRequest: >-
            /**
             * Pre-request Script: Create Bank Account with Preloaded Balance
             */

            if (!insomnia.environment.get("accountId")) {
              const host = insomnia.environment.get("host");
              const scheme = insomnia.environment.get("scheme");
              const baseUrl = `${scheme}://${host}`;

              const createAccountRequest = {
                url: `${baseUrl}/accounts`,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: {
                  mode: 'raw',
                  raw: JSON.stringify({
                    type: 'savings',
                    initial_balance: 5000.00,
                  }),
                },
              };

              const response = await new Promise((resolve, reject) => {
                insomnia.sendRequest(createAccountRequest, (err, resp) => {
                  if (err != null) reject(err);
                  else resolve(resp);
                });
              });

              if (response.code !== 201) {
                throw new Error(`Account creation failed. Status code: ${response.code}`);
              }

              const responseBody = JSON.parse(response.body.toString());


              insomnia.environment.set('accountId', responseBody.account_id);
            }
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
  - name: health
    meta:
      id: fld_c137265b4f4240d48d5c2936e570f4be
      created: 1745492361886
      modified: 1745492361886
      sortKey: -1745492361886
      description: Health check endpoints for monitoring service status
    children:
      - url: "{{ _.base_url }}/health"
        name: Health check endpoint
        meta:
          id: req_209318052ddb4df0bbf165956bd3f761
          created: 1745492361887
          modified: 1745492361887
          isPrivate: false
          description: Returns the API's health status
          sortKey: -1745492361887
        method: GET
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{ _.base_url }}/health"
        name: Health check endpoint (HEAD)
        meta:
          id: req_b52983d00f2c468aa484f94243a89657
          created: 1745492361889
          modified: 1745492361889
          isPrivate: false
          description: Returns the API's health status without body
          sortKey: -1745492361889
        method: HEAD
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
cookieJar:
  name: Default Jar
  meta:
    id: jar_878ca9b0d5187d95b6ff24df5faccf1a29dba0db
    created: 1745437611567
    modified: 1745581268678
environments:
  name: Base Environment
  meta:
    id: env_878ca9b0d5187d95b6ff24df5faccf1a29dba0db
    created: 1745437611566
    modified: 1745581268680
    isPrivate: false
  data:
    base_url: "{{ _.scheme }}://{{ _.host }}{{ _.base_path }}"
  subEnvironments:
    - name: OpenAPI env localhost:8081
      meta:
        id: env_7a36410e2817429aa9f63576d42f2823
        created: 1745441143585
        modified: 1745581268679
        isPrivate: false
        sortKey: 1745441143585
      data:
        scheme: http
        host: localhost:8081
        accountId: 160d663b-6e3b-406b-90a2-2eb3d8dfd2cb
spec:
  contents:
    openapi: 3.0.3
    info:
      title: Accounts API
      description: This API manages account information and balances.
      version: 2.0.0
      contact:
        email: stephen.brown@konghq.com
    servers:
      - url: https://accounts.kong-bank.com
        description: Production server
      - url: http://localhost:8081
        description: Local development server
    tags:
      - name: accounts
        description: Operations related to account management (retrieval and balance
          updates)
      - name: health
        description: Health check endpoints for monitoring service status
    paths:
      /health:
        get:
          tags:
            - health
          operationId: healthCheck
          summary: Health check endpoint
          description: Returns the API's health status
          responses:
            "200":
              description: API is healthy
              content:
                application/json:
                  schema:
                    type: string
                  examples:
                    success:
                      summary: Healthy response
                      value: Accounts API is running
        head:
          tags:
            - health
          operationId: healthCheckHead
          summary: Health check endpoint (HEAD)
          description: Returns the API's health status without body
          responses:
            "200":
              description: API is healthy
      /accounts:
        get:
          tags:
            - accounts
          operationId: listAccounts
          summary: List all accounts
          description: Returns a list of all accounts with basic details.
          responses:
            "200":
              description: A list of accounts was successfully retrieved
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: "#/components/schemas/Account"
                  examples:
                    multiple_accounts:
                      summary: Multiple accounts example
                      value:
                        - account_id: 123e4567-e89b-12d3-a456-426614174000
                          type: checking
                          balance: 1500
                        - account_id: 987fcdeb-51a2-43e7-89bc-765432198765
                          type: savings
                          balance: 5000
                    empty_list:
                      summary: Empty account list
            "500":
              description: Failed to retrieve accounts due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    lock_error:
                      summary: Database lock error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Lock error: failed to acquire lock while listing accounts"
        post:
          tags:
            - accounts
          operationId: createAccount
          summary: Create a new account
          description: Creates a new account with an initial balance. The account ID is
            automatically generated.
          requestBody:
            description: Details for the new account including type and initial balance. The
              account ID will be automatically generated.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/CreateAccountRequest"
                examples:
                  checking_account:
                    summary: Create checking account
                    value:
                      type: checking
                      initial_balance: 1000
                  savings_account:
                    summary: Create savings account
                    value:
                      type: savings
                      initial_balance: 5000
          responses:
            "201":
              description: Account created successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    new_account:
                      summary: Newly created account
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 1000
            "400":
              description: Failed to create account due to invalid input
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    invalid_balance:
                      summary: Invalid initial balance
                      value:
                        error_code: INVALID_INPUT
                        message: "Failed to create account: Initial balance must be non-negative"
            "500":
              description: Failed to create account due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    creation_error:
                      summary: Account creation failed
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to create account: Internal server error occurred"
      "/accounts/{accountId}":
        get:
          tags:
            - accounts
          operationId: getAccountById
          summary: Retrieve a single account
          description: Returns details for the specified account including current balance.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to retrieve
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          responses:
            "200":
              description: Account details retrieved successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    checking_account:
                      summary: Example checking account
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 1500
            "404":
              description: Account lookup failed - specified account ID does not exist
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found error
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to retrieve account: ID 123e4567-e89b-12d3-a456-426614174000
                          not found"
            "500":
              description: Failed to retrieve account details due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal server error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to retrieve account: Internal server error occurred"
      "/accounts/{accountId}/debit":
        post:
          tags:
            - accounts
          operationId: debitAccount
          summary: Debit an account
          description: Decreases the account's balance by the specified amount.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to debit
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          requestBody:
            description: Specifies the amount to debit from the account balance.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UpdateBalanceRequest"
                examples:
                  small_debit:
                    summary: Small debit amount
                    value:
                      amount: 100
                  large_debit:
                    summary: Large debit amount
                    value:
                      amount: 1000
          responses:
            "200":
              description: Account debited successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    successful_debit:
                      summary: Account after successful debit
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 900
            "400":
              description: Debit operation failed due to insufficient funds or invalid amount
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    insufficient_funds:
                      summary: Insufficient funds error
                      value:
                        error_code: INSUFFICIENT_FUNDS
                        message: "Failed to debit account: Insufficient funds - balance is 900.00,
                          attempted to debit 1000.00"
            "404":
              description: Debit operation failed - account not found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to debit account: Account does not exist"
            "500":
              description: Failed to process debit operation due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to debit account: Internal server error occurred"
      "/accounts/{accountId}/credit":
        post:
          tags:
            - accounts
          operationId: creditAccount
          summary: Credit an account
          description: Increases the account's balance by the specified amount.
          parameters:
            - name: accountId
              in: path
              required: true
              description: The UUID of the account to credit
              schema:
                type: string
                format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
          requestBody:
            description: Specifies the amount to credit to the account balance.
            required: true
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/UpdateBalanceRequest"
                examples:
                  small_credit:
                    summary: Small credit amount
                    value:
                      amount: 500
                  large_credit:
                    summary: Large credit amount
                    value:
                      amount: 5000
          responses:
            "200":
              description: Account credited successfully
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Account"
                  examples:
                    successful_credit:
                      summary: Account after successful credit
                      value:
                        account_id: 123e4567-e89b-12d3-a456-426614174000
                        type: checking
                        balance: 2000
            "400":
              description: Credit operation failed due to invalid amount
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    invalid_amount:
                      summary: Invalid amount error
                      value:
                        error_code: INVALID_INPUT
                        message: "Failed to credit account: Amount must be positive"
            "404":
              description: Credit operation failed - account not found
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    not_found:
                      summary: Account not found
                      value:
                        error_code: NOT_FOUND
                        message: "Failed to credit account: Account does not exist"
            "500":
              description: Failed to process credit operation due to internal server error
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
                  examples:
                    server_error:
                      summary: Internal error
                      value:
                        error_code: INTERNAL_ERROR
                        message: "Failed to credit account: Internal server error occurred"
    components:
      schemas:
        Account:
          type: object
          description: Represents a bank account with its core details including ID, type,
            and current balance.
          example:
            account_id: 123e4567-e89b-12d3-a456-426614174000
            type: checking
            balance: 1500
          properties:
            account_id:
              type: string
              format: uuid
              description: Unique identifier for the account (UUID v4)
              example: 123e4567-e89b-12d3-a456-426614174000
            type:
              type: string
              description: The type of the account (e.g., checking, savings)
              example: checking
            balance:
              type: number
              format: double
              description: The current balance of the account in the account's currency
              example: 1500
        CreateAccountRequest:
          type: object
          description: Request payload for creating a new account.
          example:
            type: savings
            initial_balance: 5000
          required:
            - type
            - initial_balance
          properties:
            type:
              type: string
              description: The type of account to create (e.g., checking, savings)
              example: savings
            initial_balance:
              type: number
              format: double
              description: The initial balance to fund the account with
              example: 5000
        UpdateBalanceRequest:
          type: object
          description: Request payload for updating an account's balance via credit or
            debit operations.
          example:
            amount: 100
          required:
            - amount
          properties:
            amount:
              type: number
              format: double
              description: The amount to credit or debit from the account
              example: 100
        ErrorResponse:
          type: object
          description: Standard error response structure for all error cases.
          example:
            error_code: NOT_FOUND
            message: The requested account does not exist.
          required:
            - error_code
            - message
          properties:
            error_code:
              type: string
              description: A standardized error code identifying the type of error
              example: NOT_FOUND
              enum:
                - INTERNAL_ERROR
                - NOT_FOUND
                - INSUFFICIENT_FUNDS
                - INVALID_INPUT
            message:
              type: string
              description: A human-readable description of the error
              example: The requested account does not exist.
  meta:
    id: spc_51265b88081a4bdc86e12d4e05331409
    created: 1745437611564
    modified: 1745586415604
testSuites:
  - name: Account Test Suite
    meta:
      id: uts_f122182a30554059a87f0dedd0a11384
      created: 1745517305624
      modified: 1745581012420
      sortKey: -1745517305624
    tests:
      - name: Create New Account
        meta:
          id: ut_538675977e4a4df097a6a7af95b2ee71
          created: 1745517322781
          modified: 1745517344170
          sortKey: -1745517322782
        requestId: req_ba0a763a6a6248fc9b8f7e3f4f62ab4b
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(201);

          const account = JSON.parse(response.data);
          expect(account).to.have.property('account_id').that.is.a('string');
          expect(account).to.have.property('type').that.is.a('string');
          expect(account).to.have.property('balance').that.is.a('number');
      - name: List All Accounts
        meta:
          id: ut_804a82ca0564480b951402fda2d9563d
          created: 1745517356874
          modified: 1745517431673
          sortKey: -1745517356874
        requestId: req_7245dd6044714a20bec34e08672a78a0
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const accounts = JSON.parse(response.data);
          expect(accounts).to.be.an('array');

          if (accounts.length > 0) {
            const account = accounts[0];
            expect(account).to.have.property('account_id').that.is.a('string');
            expect(account).to.have.property('type').that.is.a('string');
            expect(account).to.have.property('balance').that.is.a('number');
          }
      - name: Health Check
        meta:
          id: ut_4277c1f6dd4c47b887705fd4e40699b4
          created: 1745578520254
          modified: 1745578547301
          sortKey: -1745525002296.5
        requestId: req_209318052ddb4df0bbf165956bd3f761
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const body = response.data;
          expect(body).to.be.a('string');
          expect(body.toLowerCase()).to.include('accounts api');
      - name: Credit Account
        meta:
          id: ut_b0fec0d630e94922a7c71b5e6bb1319e
          created: 1745578566922
          modified: 1745578587500
          sortKey: -1745578566922
        requestId: req_14397dc6deb74f15bb55b759424772b3
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const account = JSON.parse(response.data);
          expect(account).to.have.property('account_id').that.is.a('string');
          expect(account).to.have.property('balance').that.is.a('number');
      - name: Debit Account
        meta:
          id: ut_c6458402b58e4727805446af34c18f6c
          created: 1745578605756
          modified: 1745578623432
          sortKey: -1745578605756
        requestId: req_7025ef0af1b5487990d7e02691cb64ca
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const account = JSON.parse(response.data);
          expect(account).to.have.property('account_id').that.is.a('string');
          expect(account).to.have.property('balance').that.is.a('number');
      - name: Get Account By ID
        meta:
          id: ut_0651437c03004f93a7e5215747f4bb5c
          created: 1745578626868
          modified: 1745578661926
          sortKey: -1745578626868
        requestId: req_b5164ddb34404075821879193ab5dd3d
        code: |-
          const response = await insomnia.send();

          expect(response.status).to.equal(200);

          const account = JSON.parse(response.data);
          expect(account).to.have.property('account_id').that.is.a('string');
          expect(account).to.have.property('type').that.is.a('string');
          expect(account).to.have.property('balance').that.is.a('number');
